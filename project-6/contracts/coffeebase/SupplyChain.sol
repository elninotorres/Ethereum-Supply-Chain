pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
import "../coffeeaccesscontrol/TailorRole.sol";
import "../coffeeaccesscontrol/OnlineConsumer.sol";
import "../coffeeaccesscontrol/DeliveryAgentRole.sol";
import "../coffeecore/Ownable.sol";
contract SupplyChain is Ownable, TailorRole, ConsumerRole, DeliveryAgentRole {

  // Define 'owner'
  // address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Stiched,  // 0
    ForSale,  // 1
    Sold,     // 2
    Shipped,    // 3
    Delivered,    // 4,
    Received  // 6
  }

  State constant defaultState = State.Stiched;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originTailorID; // Metamask-Ethereum address of the Farmer
    string  originTailorName; // Farmer Name
    string  originTailorInformation;  // Farmer Information
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address deliveryAgentID;  // Metamask-Ethereum address of the Distributor
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Stiched(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Delivered(uint upc);
  event Received(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  // modifier onlyOwner() {
  //   require(msg.sender == owner);
  //   _;
  // }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address,'Different caller');
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price,'Not Paid Enough');
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier stitched(uint _upc) {
    require(items[_upc].itemState == State.Stiched,
    'Not in Stiched State');
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale,'Not for Sale');
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold,
    'Not in sold state');
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped,'Not in Shipped State');
    _;
  }

    // Define a modifier that checks if an item.state of a upc is Delivered
  modifier delivered(uint _upc) {
    require(items[_upc].itemState == State.Delivered,'Not in Delivered State');
    _;
  }


  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, 'Not in Received state');
    _;
  }


  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    // owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() onlyOwner() public {
      selfdestruct(owner());
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function makeClothes(uint _upc, address _originTailorID, string _originTailorName, string _originTailorInformation, string  _productNotes, uint _productPrice) public 
  {
    // Add the new item as part of Harvest
    items[_upc] = Item({
      sku: sku,
      upc: _upc,
      ownerID: _originTailorID,
      productID: sku + _upc,
      originTailorID : _originTailorID,
      originTailorName : _originTailorName,
      originTailorInformation : _originTailorInformation,
      productNotes: _productNotes,
      itemState: State.Stiched,
      productPrice: _productPrice,
      deliveryAgentID:address(0),
      consumerID: address(0)
    });
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Stiched(_upc);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function addItemOnline(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  stitched(_upc)
  
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].originTailorID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    // Emit the appropriate event
    emit ForSale(_upc);
    
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    
    {


        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;
        items[_upc].itemState = State.Sold;
        // Transfer money to farmer
        items[_upc].originTailorID.transfer(items[_upc].productPrice);
        // emit the appropriate event
        emit Sold(_upc);
    }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc, address _deliveryAgentID) public
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].originTailorID)
    {
    // Update the appropriate fields
        items[_upc].itemState = State.Shipped;
        items[_upc].deliveryAgentID = _deliveryAgentID;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function deliverItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    {
      items[_upc].deliveryAgentID = msg.sender;
      items[_upc].itemState = State.Delivered;
    // Emit the appropriate event
    emit Delivered(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function recieveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    delivered(_upc)
    verifyCaller(items[_upc].consumerID)
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
      items[_upc].itemState = State.Received;
    // Emit the appropriate event
      emit Received(_upc);
    
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originTailorID,
  string  originTailorName,
  string  originTailorInformation)
  {
  // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originTailorID = items[_upc].originTailorID;
    originTailorName = items[_upc].originTailorName;
    originTailorInformation = items[_upc].originTailorInformation;
  return
  (
  itemSKU,
  itemUPC,
  ownerID,
  originTailorID,
  originTailorName,
  originTailorInformation
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address deliveryAgentID,
  address consumerID
  ) 
  {

    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint(items[_upc].itemState);
    deliveryAgentID = items[_upc].deliveryAgentID;
    consumerID = items[_upc].consumerID;
    // Assign values to the 9 parameters
  
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  deliveryAgentID,
  consumerID
  );
  }
}
