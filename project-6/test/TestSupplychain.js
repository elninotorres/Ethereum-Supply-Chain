// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originTailorID = accounts[1]
    const originTailorName = "John Doe"
    const originTailorInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const deliveryAgentID  = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Tailor: accounts[1] ", accounts[1])
    console.log("Deliery agent: accounts[2] ", accounts[2])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function makeClothes() that allows a tailor to make clothes", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Stiched()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.makeClothes(upc, originTailorID, originTailorName, originTailorInformation, productNotes, productPrice)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originTailorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originTailorID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originTailorName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originTailorInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function addItemOnline() that allows a tailor to add clothes online", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        
        // Watch the emitted event Processed()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })
        

        // Mark an item as Processed by calling function processtItem()

        await supplyChain.addItemOnline(upc,{from: originTailorID})
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originTailorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originTailorID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originTailorName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originTailorInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  

        
    })    

    // 3rd Test
    it("Testing smart contract function buyItem() that allows a person to buy clothes", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        
        // Watch the emitted event Packed()
        var spldEvent = supplyChain.Sold()
        await spldEvent.watch((err, res) => {
            eventEmitted = true
        })
        

        // Mark an item as Packed by calling function packItem()
        
        var paidAmount =  web3.toWei("2", "ether")
        await supplyChain.buyItem(upc,{from: consumerID,value: paidAmount})
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originTailorID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originTailorName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originTailorInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Invalid consumerid')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
        
    })    

    // 4th Test
    it("Testing smart contract function shipItem() that allows a person to ship items", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event ForSale()
        var eventEmitted = false
        // Watch the emitted event Processed()
       var event = supplyChain.Shipped()
       await event.watch((err, res) => {
           eventEmitted = true
       })
        

        // Mark an item as ForSale by calling function shipItem()
        await supplyChain.shipItem(upc,deliveryAgentID,{from: originTailorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originTailorID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originTailorName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originTailorInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], deliveryAgentID, 'Error: Invalid deliveryAgentID')
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
        
    })    

    // 5th Test
    it("Testing smart contract function deliverItem() that allows a distributor to deliver clothes", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        var eventEmitted = false
        // Watch the emitted event Processed()
       var event = supplyChain.Delivered()
       await event.watch((err, res) => {
           eventEmitted = true
       })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.deliverItem(upc,{from: deliveryAgentID})
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originTailorID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originTailorName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originTailorInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], deliveryAgentID, 'Error: Invalid deliveryAgentID')
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
        
    })    

    // 6th Test
    it("Testing smart contract function recieveItem() that allows a consumer to recieveItem clothes", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        // Watch the emitted event Processed()
       var event = supplyChain.Received()
       await event.watch((err, res) => {
           eventEmitted = true
       })
        
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.recieveItem(upc,{from: consumerID})
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originTailorID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originTailorName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originTailorInformation, 'Error: Missing or Invalid originTailorInformation')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], deliveryAgentID, 'Error: Invalid deliveryAgentID')
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
              
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      
        
        // Verify the result set:
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originTailorID, 'Error: Missing or Invalid originTailorID')
        assert.equal(resultBufferOne[4], originTailorName, 'Error: Missing or Invalid originTailorName')
        assert.equal(resultBufferOne[5], originTailorInformation, 'Error: Missing or Invalid originTailorInformation')
        
        
        // Verify the result set:
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        
        // Verify the result set:
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], deliveryAgentID, 'Error: Missing or Invalid deliveryAgentID')
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
        
        
        // Verify the result set:
        
    })

});

